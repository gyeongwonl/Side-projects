#BlueJ class context
comment0.target=Session
comment1.params=ID\ type\ maxNum\ speaker\ room\ rType
comment1.target=Session(int,\ int,\ int,\ java.lang.String,\ int,\ java.lang.String)
comment1.text=\r\n\ Constructor...receives\ basic\ info\ from\ Main\ class\ to\ initialize\ each\ Session\ object\ appropriately...One\ Session\ object\ for\ each\ session\r\n
comment10.params=output\ enrolled\ max
comment10.target=void\ notifications(java.io.PrintWriter,\ int,\ int)
comment11.params=
comment11.target=java.lang.String\ sessionInfo()
comment11.text=\r\n\ @return\ String\ variable\ containing\ session\ Info\r\n\ \r\n\ Called\ by\ printAllStudentSchedule()\ method\r\n
comment12.params=
comment12.target=java.lang.String\ sessionInfoForNametag()
comment13.params=studentName\ slot
comment13.target=void\ unEnroll(java.lang.String,\ int)
comment2.params=
comment2.target=void\ setmaxNumEachSlot()
comment2.text=\r\n\ Used\ by\ the\ Constructor\ to\ set\ Max\ \#\ of\ students\ allowed\ to\ register\ in\ each\ slot\ (A/B)\ according\ to\ the\ type\ of\ the\ Session\r\n
comment3.params=index
comment3.target=Session\ getSession(int)
comment3.text=\r\n\ @param\:\ receives\ an\ integer\ index\ value\ of\ the\ Session\ (in\ sessionArr)\ that\ the\ Student\ class\ wishes\ to\ access\r\n\ @return\:\ Session\ object\ found\ at\ given\ index\ value\ in\ sessionArr\r\n
comment4.params=name\ sesEnrolled\ MANUALLY_ENROLL_SLOT
comment4.target=void\ enroll(java.lang.String,\ Session[],\ int)
comment4.text=\r\n\ @param\:\ receives\ the\ name\ of\ the\ student\ who\ is\ attempting\ to\ enroll\ in\ the\ session(this),\ \r\n\ and\ the\ array\ that\ contains/will\ contain\ the\ Sessions\ in\ which\ the\ student\ is\ successfully\ enrolled,\r\n\ and\ the\ boolean\ indicating\ whether\ the\ student\ was\ unsuccessful\ in\ fully\ enrolling\ the\ first\ time\ and\ thus\ is\ trying\ again\r\n\ \r\n\ This\ method\ first\ checks\ if\ enrollment\ is\ possible\ with\ the\ help\ of\ findSlot()\ method,\r\n\ then,\ if\ possible,\ enrolls\ the\ student\ in\ the\ session\ at\ the\ specific\ slot(s)\r\n
comment5.params=AOpen\ BOpen
comment5.target=int\ findSlot(boolean,\ boolean)
comment5.text=\r\n\ @param\:\ receives\ two\ boolean\ values\ indicating\ the\ available/empty\ time\ slots\ that\ the\ student\ has,\r\n\ and\ the\ boolean\ indicating\ whether\ the\ student\ was\ unsuccessful\ in\ fully\ enrolling\ the\ first\ time\ and\ thus\ is\ trying\ again.\r\n\ @return\:\ returns\ an\ int\ value\ representing\ the\ time\ slot\ that\ the\ student\ should\ be\ attempting\ to\ enroll\ in\ for\ the\ given\ session(this)\ \ \ \ \r\n\ returns\ 0\ for\ slot\ A,\ 1\ for\ slot\ B,\ -1\ for\ no\ slots\ available\r\n\ \r\n\ This\ method\ looks\ for\ a\ slot\ in\ which\ student\ enrollment\ is\ possible.\ It\ does\ this\ by\ checking\ if\ \r\n\ a)\ the\ student\ is\ available\ (are\ not\ already\ registered\ in\ a\ session)\ during\ the\ slot(s)\ the\ session\ is\ offered\ in\r\n\ and\ b)\ the\ session\ is\ available\ (below\ max\ capacity\ at\ that\ slot)\r\n\ \r\n\ In\ specific\ circumstances\ (sesssion\ type\ is\ 3,\ student\ is\ available\ to\ enroll\ in\ either\ slots,\ retry\=\=true),\r\n\ try\ enrolling\ the\ student\ in\ the\ MORE\ filled\ slot\r\n
comment6.params=
comment6.target=boolean\ sessionSlotAOpen()
comment6.text=\r\n\ @return\ true\ if\ slot\ A\ has\ room\ for\ one\ more\ student,\ false\ if\ already\ full\r\n
comment7.params=
comment7.target=boolean\ sessionSlotBOpen()
comment7.text=\r\n\ @return\ true\ if\ slot\ B\ has\ room\ for\ one\ more\ student,\ false\ if\ already\ full\r\n
comment8.params=
comment8.target=void\ updateNonMaxSessionsLst()
comment9.params=output
comment9.target=void\ printSessionEnrollment(java.io.PrintWriter)
comment9.text=\r\n\ @param\:\ receives\ a\ PrintWriter\ object\ instantiated\ in\ the\ Main\ class\r\n\ \r\n\ Prints\ out\ lists\ of\ students\ enrolled\ in\ each\ slot\ of\ all\ sessions\ to\ the\ assignmentOutput.txt\r\n
numComments=14
